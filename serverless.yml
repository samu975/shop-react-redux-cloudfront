service: my-store-app

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  # setup profile for AWS CLI.
  profile: samuel_rosero
  environment:
    PRODUCTS_TABLE: products
    STOCKS_TABLE: stocks

plugins:
  - serverless-finch
  # 'serverless-single-page-app-plugin' is a custom plugin that located .serverless_plugins folder.
  # Existing plugin (https://www.npmjs.com/package/serverless-single-page-app-plugin) doesn't have invalidate cache feature that often used during CI/CD events.
  # How to build your own plugins: https://www.serverless.com/framework/docs/providers/aws/guide/plugins#service-local-plugin
  - serverless-single-page-app-plugin
  - serverless-s3-cleaner
  - serverless-plugin-common-excludes
  - serverless-plugin-include-dependencies

custom:
  client:
    bucketName: epam-aws-coruse-task-3
    distributionFolder: dist
  s3BucketName: ${self:custom.client.bucketName}

  ## Serverless-single-page-app-plugin configuration:
  s3LocalPath: ${self:custom.client.distributionFolder}/
  serverless-s3-cleaner:
    buckets:
      - ${self:custom.client.bucketName}

functions:
  getProductsList:
    handler: lambdas/getProductsList.handler
    events:
      - http:
          path: products
          method: get
          cors: true
  getProductsById:
    handler: lambdas/getProductsById.handler
    events:
      - http:
          path: product/{productId}
          method: get
          cors: true
  createProduct:
    handler: lambdas/createProduct.handler
    events:
      - http:
          path: products
          method: post
          cors: true
  catalogBatchProcess:
    handler: lambdas/catalogBatchProcess.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
          batchSize: 5
importFileParser:
  handler: handler.importFileParser
  events:
    - s3:
        bucket: ${self:custom.s3BucketName}
        event: s3:ObjectCreated:*
  environment:
    SQS_QUEUE_URL:
      Fn::GetAtt:
        - catalogItemsQueue
        - Arn

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
        DisplayName: CreateProductTopic
        TopicName: createProductTopic
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - catalogItemsQueueDLQ
              - Arn
          maxReceiveCount: 3

    createProductTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        TopicArn:
          Ref: createProductTopic
        Endpoint: safero99@gmail.com

    ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
        # AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        # VersioningConfiguration:
        #   Status: Enabled

    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: 'AllowCloudFrontAccessIdentity'
              Effect: Allow
              Action: s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3BucketName}/*
              Principal:
                AWS:
                  Fn::Join:
                    - ' '
                    - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'
                      - !Ref OriginAccessIdentity

    OriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Access identity between CloudFront and S3 bucket

    ## DyanmoDB Table
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: products
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    StocksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: stocks
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt WebAppS3Bucket.RegionalDomainName
              ## An identifier for the origin which must be unique within the distribution
              Id: myS3Origin
              ## In case you don't want to restrict the bucket access use CustomOriginConfig and remove S3OriginConfig
              S3OriginConfig:
                OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
              # CustomOriginConfig:
              #   HTTPPort: 80
              #   HTTPSPort: 443
              #   OriginProtocolPolicy: https-only
          Enabled: true
          IPV6Enabled: true
          HttpVersion: http2
          ## Uncomment the following section in case you are using a custom domain
          # Aliases:
          # - mysite.example.com
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods: ['GET', 'HEAD', 'OPTIONS']
            CachedMethods: ['GET', 'HEAD', 'OPTIONS']
            ForwardedValues:
              Headers:
                - Access-Control-Request-Headers
                - Access-Control-Request-Method
                - Origin
                - Authorization
              ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
              QueryString: false
              Cookies:
                Forward: none
            ## The origin id defined above
            TargetOriginId: myS3Origin
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            DefaultTTL: 0
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppS3BucketOutput:
      Value: !Ref WebAppS3Bucket
    WebAppCloudFrontDistributionOutput:
      Value: !GetAtt WebAppCloudFrontDistribution.DomainName
